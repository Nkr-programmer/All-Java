package intro;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Path_In_A_Rectangle_With_Circles {
	private static int v;
	private static ArrayList<Integer> a[];

	public Path_In_A_Rectangle_With_Circles(int i) {
		v = i;
		a = new ArrayList[i];
		for (int j = 0; j < i; ++j) {
			a[j] = new ArrayList<Integer>();
		}
	}
	void addEdge(int v, int w) {
		a[v].add(w);
		}

	public static void main(String[] args) {
		
		int m=5,n=5,k=2,r=1;
		int a[]= {1,3};
		int b[]= {3,3};
		int c[][]=new int[m][n];
		int q=a[0]-1,w=a[1]-1;
		for(int i=0;i<k;i++)
		{
		 if(i==0) {q=a[0]-1;w=a[1]-1;}
		 else
			 if(i==1) {q=b[0]-1;w=b[1]-1;}
		 
    //if((q-r)>=0&&(w+r)<=m-1) {c[q-r][w+r]=1;}
	if((q)>=0&&(w+r)<=m-1) {c[q][w+r]=1;}
	//if((q+r)<=m-1&&(w+r)<=m-1) {c[q+r][w+r]=1;}
	if((q-r)>=0&&(w)<=m-1) {c[q-r][w]=1;}
	if((q)>=0&&(w)<=m-1) {c[q][w]=1;}
	if((q+r)<=m-1&&(w)<=m-1) {c[q+r][w]=1;}
	//if((q-r)>=0&&(w-r)>=0) {c[q-r][w-r]=1;}
	if((q)>=0&&(w-r)>=0) {c[q][w-r]=1;}
	//if((q+r)<=m-1&&(w-r)>=0) {c[q+r][w-r]=1;}
		}
		
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				System.out.print(c[i][j]+" ");
			}
			System.out.println();
		}
		BFS(c);
	}

	private static void BFS(int[][] c) {
		Queue<Integer> a = new LinkedList<Integer>();
		Queue<Integer> b = new LinkedList<Integer>();
		
		if(c[0][0]!=1) {
		a.add(0);
		b.add(0);}
int d=0,e=0;
		while (!b.isEmpty()&&!a.isEmpty()) {
			d = a.poll();
			e = b.poll();
System.out.println(d+" "+e);			

		//	for (int j = 0; j < a[c].size(); j++) {
//				int n = a[c].get(j);
//				if (!x[n]) {
//					x[n] = true;
//					b.add(n);
//				}
//			}
//  DFS TO FIND PATH ALGO THAT I DONT KNOW
		}
	

	
	}
}