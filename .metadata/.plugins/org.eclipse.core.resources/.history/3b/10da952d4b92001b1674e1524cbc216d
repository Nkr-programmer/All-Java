package intro;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Path_In_A_Rectangle_With_Circles {
	private static int v;
	private static ArrayList<Integer> a[];

	public Path_In_A_Rectangle_With_Circles(int i) {
		v = i;
		a = new ArrayList[i];
		for (int j = 0; j < i; ++j) {
			a[j] = new ArrayList<Integer>();
		}
	}
	void addEdge(int v, int w) {
		a[v].add(w);
		}

	public static void main(String[] args) {
		
		int m=5,n=5,k=2,r=1;
		int a[]= {1,3};
		int b[]= {3,3};
		int c[][]=new int[m][n];
		int q=a[0]-1,w=a[1]-1;
		for(int i=0;i<k;i++)
		{
		// if(i==0) {q=a[0]-1;w=a[1]-1;}
		 //else
			 if(i==1) {q=b[0]-1;w=b[1]-1;}
		 
//	if((q-r)>=0&&(q+r)<=m-1) {c[q-r][q+r]=1;}
	if((q)>=0&&(q+r)<=m-1) {c[q][q+r]=1;}
	//if((q+r)<=m-1&&(q+r)<=m-1) {c[q+r][q+r]=1;}
	if((q-r)>=0&&(q)<=m-1) {c[q-r][q]=1;}
	if((q)>=0&&(q)<=m-1) {c[q][q]=1;}
	if((q+r)<=m-1&&(q)<=m-1) {c[q+r][q]=1;}
	//if((q-r)>=0&&(q-r)>=0) {c[q-r][q-r]=1;}
	if((q)>=0&&(q-r)>=0) {c[q][q-r]=1;}
	//if((q+r)<=m-1&&(q-r)>=0) {c[q+r][q-r]=1;}
		}
		
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				System.out.print(c[i][j]+" ");
			}
			System.out.println();
		}
		
	}

	private void BFS(int i) {
		// TODO Auto-generated method stub
		boolean x[] = new boolean[v];
		Queue<Integer> b = new LinkedList<Integer>();
		x[i] = true;
		b.add(i);

		while (!b.isEmpty()) {
			i = b.poll();
System.out.println(i);			

			for (int j = 0; j < a[i].size(); j++) {
				int n = a[i].get(j);
				if (!x[n]) {
					x[n] = true;
					b.add(n);
				}
			}
		}
	

	
	}
}