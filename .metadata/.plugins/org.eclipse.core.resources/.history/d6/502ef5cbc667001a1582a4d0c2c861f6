package stack_array_3;

import java.util.Stack;

public class Q__array {
	static Stack<Integer> p= new Stack<Integer>();

	


public static void nextgreater(int a[],int n){
	int x=0;
	for(int i=0;i<n;i++)
	{x=0;
		for(int j=i+1;j<n;j++)
		{
			if(a[i]<a[j])
			{x=1;
				System.out.println(a[j]);
                 break;
			}
			
		}	
		if(x==0) {
			System.out.println("-1");
		}
		
	}
}


public static void nextelement(int a[],int n) {
	
	Stack<Integer> s= new Stack<Integer>();
	int element,next;
	s.push(a[0]);
	
	
	
	for(int i=1;i<n;i++)
	{
		
		next=a[i];
		
		if(s.isEmpty()!=true)
		{
			element=s.pop();
		while(element<next) {
			System.out.println(element+"-->"+next);
			if(s.isEmpty()==true)
			{
				break;
			}
			element=s.pop();
		}
		
		
		if(element>next)
		{
			s.push(element);
		}
		}
		s.push(next);
		
	}
	
	while(s.isEmpty()!=true)
	{
		element=s.pop();
		next=-1;
		System.out.println(element+"-->"+next);
		
	}
	
	
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
int a[]= {16,2,5,15,8,1};
int s[]= new int[6] ;

//		nextgreater(a,4);
//		nextelement(a,4);

//stockspan(a,6);
stockspanrecurtion(a,6,s);

  

for(int i=0;i<6;i++)
{
System.out.println(s[i]);	
}

	}


	private static void stockspanrecurtion(int[] a, int n,int[] h) {
	
		int x=0,t=0;
		while(x<n)
		{
			if(a[x]<=a[n-1])
			{
				t++;
			}
			h[n-1]=t;
		}
		
		if(n>0)
		{
			stockspanrecurtion(a,n-1,h);	
		}
		
		
		
	}


	private static void stockspan(int[] a, int n) {

		
		int x=0;
		for(int i=0;i<n;i++)
		{x=0;
			for(int j=0;j<=i;j++)
			{
				if(a[i]>=a[j])
				{
					x+=1;
				}
				
			}	
			
				System.out.println(x);
			
			
		}
		
		
		
		
		
	}
	
	
	
	

}
