package stackandqueued;

import java.util.Stack;

public class Medium {
	public static class MyCircularQueue {
		public int
		size =1000;
		int top;
		int rear;
		int a[];
		    /** Initialize your data structure here. Set the size of the queue to be k. */
		    public  MyCircularQueue(int k) {
		     a=new int[k];
size=k;
		    	top=-1;
				rear =-1;
		    }
		    
		    /** Insert an element into the circular queue. Return true if the operation is successful. */
		    public boolean enQueue(int data) {
		    	if(rear==size-1)
		    	{if(top!=0) {rear=0;a[rear]=data;}
		    	return true;
		    	}
		    	else 
		    		if(rear==top&&top==-1)
		    	{
		    	a[++rear]=data;
		    	top++;
		    	}
		    	if(rear+1==top) {
		    	return false;
		    	}
		    		else {
		    			a[++rear]=data;
		    		}
				return true;
		    }
		    
		    /** Delete an element from the circular queue. Return true if the operation is successful. */
		    public boolean deQueue() {

int x;
x=a[top++];
if(top==size-1)
{top=0;
}
if(top==rear)
{
return false;
}


Rear ();
Front();
return true;	
		        
		    }
		    
		    /** Get the front item from the queue. */
		    public int Front() {

		    	System.out.println(a[top]);
				return a[top];
		        
		    }
		    
		    /** Get the last item from the queue. */
		    public int Rear() {
		    	System.out.print(a[rear]+" ");
				return a[rear];
		        
		    }
		    
		    /** Checks whether the circular queue is empty or not. */
		    public boolean isEmpty() {
		    	if(top==rear)
		    	{
		    	return true;
		    	}
		    		
		    		return false;
		        
		    }
		    
		    /** Checks whether the circular queue is full or not. */
		    public boolean isFull() {
		    	if(rear==a.length-1&&top==0)
		    	{
		    	return true;
		    	}
		    	if(top-1==rear)
		    	{
		    	return true;
		    	}
		    		
		    		return false;
		    }
		}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3
		circularQueue.enQueue(1);  // return true
		circularQueue.enQueue(2);  // return true
		circularQueue.enQueue(3);  // return true
		circularQueue.enQueue(4);  // return false, the queue is full
		circularQueue.Rear();  // return 3
		circularQueue.isFull();  // return true
		circularQueue.deQueue();  // return true
		circularQueue.enQueue(4);  // return true
		circularQueue.Rear();  // return 4
	}
}